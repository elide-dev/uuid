group GROUP
version VERSION

def isReleaseBuild() {
  return VERSION.contains('SNAPSHOT') == false
}

def getReleaseRepositoryUrl() {
  return hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL :
      'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
}

def getSnapshotRepositoryUrl() {
  return hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL :
      's3://elide-maven'
}

def getRepositoryUsername() {
  return System.getenv('SONATYPE_USERNAME') ?: ''
}

def getRepositoryPassword() {
  return System.getenv('SONATYPE_PASSWORD') ?: ''
}

task javadocsJar(type: Jar, dependsOn: dokkaHtml) {
  archiveClassifier = 'javadoc'
  from dokkaHtml.outputDirectory
}

publishing {
  publications.all {
    artifact javadocsJar

    pom.withXml {
      def root = asNode()

      root.children().last() + {
        resolveStrategy = Closure.DELEGATE_FIRST

        description properties["POM_DESCRIPTION"]
        name properties["POM_NAME"]
        url properties["POM_URL"]
        licenses {
          license {
            name properties["POM_LICENCE_NAME"]
            url properties["POM_LICENCE_URL"]
            distribution properties["POM_LICENCE_DIST"]
          }
        }
        scm {
          url properties["POM_SCM_URL"]
          connection properties["POM_SCM_CONNECTION"]
          developerConnection properties["POM_SCM_DEV_CONNECTION"]
        }
        developers {
          developer {
            id properties["POM_DEVELOPER_ID"]
            name properties["POM_DEVELOPER_NAME"]
          }
        }
      }
    }
  }

  repositories {
    maven {
      url isReleaseBuild() ? getReleaseRepositoryUrl() : getSnapshotRepositoryUrl()
      if (getRepositoryUsername() != null) {
        credentials {
          username getRepositoryUsername()
          password getRepositoryPassword()
        }
      }
    }
    maven {
      name = "GitHubPackages"
      url "https://maven.pkg.github.com/elide-dev/uuid"
      if (getRepositoryUsername() != null) {
        credentials {
          username System.getenv("GITHUB_ACTOR")
          password System.getenv("GITHUB_TOKEN")
        }
      }
    }
  }
}

signing {
    required { isReleaseBuild() }
    def signingKeyId = System.getenv("SIGNING_KEYID")
    def signingKey = System.getenv("SIGNING_KEY")
    def signingPassword = System.getenv("SIGNING_PASSWORD")
    useInMemoryPgpKeys(signingKeyId, signingKey, signingPassword)
    sign(publishing.publications)
}

tasks.withType(Sign) {
    onlyIf { isReleaseBuild() && (System.getenv("SIGNING_KEYID") != null) }
}

tasks.withType(AbstractPublishToMaven) {
    dependsOn(tasks.withType(Sign))
}
